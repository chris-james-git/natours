$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;

/* * is the universal selector. This is used here to apply a full reset */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; /* Better practise for plugin support */
}

html {
  /* Set the root font size to make life easier
  so that 1rem = 10px for easy calculation */
  /* We do not specify an absolute px size because
  that would override any user agent settings. Instead
  we specify a percentage of the user agent / browser
  default. */
  /* This also supports zooming */
  font-size: 62.5%; /* 62.5% is approx 10px if user = 16px */
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: $color-grey-dark;
  /* add a border around the entire webpage */
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  /* vh lets us set a percentage of viewport height */
  height: 95vh;
  /* add a gradient on top of an image */
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero.jpg);
  /* cover will always try to fit the image within the viewport */
  background-size: cover;
  background-position: top;
  /* set position: relative to make children determine their positions relative to this */
  position: relative;

  /* specify the 4 clockwise coords that lay out the visible section.
    Check out https://bennettfeely.com/clippy/ for a generator */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

/* We use the BEM architecture to make it easier to understand the structure:
BEM class naming convention = block__element--modifier */
.header__logo-box {
  /* positioning will be determined by parent which needs its position set to relative*/
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  /* position is absolute, so in relation to the parent */
  top: 40%;
  left: 50%;
  /* transform moves the element relative to ITSELF, in this case to center the middle */
  transform: translate(-50%, -50%);
  /* Align text content including display: inline-block to center*/
  text-align: center;
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;
  /* Sometimes animations show a jerky movement at the end. This is a 'fix'. */
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

.heading-primary--main {
  /* By default, a span element is inline, so it would normally display like text, sequentially.
    We use a block display style to make the element use its entire width */
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  /* animation-timing-function adjusts the play speed of the animation.
    See https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function for more information. */
  animation-timing-function: ease-out;
  /*
    animation-delay: 3s; 
        animation-iteration-count: 3;
*/
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  /* We can implement an animation using the short-hand animation style */
  animation: moveInRight 1s ease-out;
}

/* Use @keyframes to define animations */
/* Browsers are optimised to animate opacity and transform */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  /* transition all for simple animation on all properties */
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-3px);
  /* X Y Blur Color */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

/* active = click */
.btn:active {
  /* relative to the initial state, NOT hover */
  transform: translateY(-1px);
  /* Shrink the shadow on click for natural effect */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
  background-color: $color-white;
  color: $color-grey-dark;
}

/* :: defines a pseudo-element,
treated like a child of the main element for inheritance 
purposes */
.btn::after {
  /* content must be defined, even if empty */
  content: '';
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  /* relative to first parent having position: relative*/
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn--white::after {
  background-color: $color-white;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn--animated {
  /* duration timingfunc delay */
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* apply the styles for 0% before the animateion begins */
  animation-fill-mode: backwards;
}
