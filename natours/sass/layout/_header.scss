.header {
  /* vh lets us set a percentage of viewport height */
  height: 95vh;
  /* add a gradient on top of an image */
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero-small.jpg);
  /* cover will always try to fit the image within the viewport */
  background-size: cover;
  background-position: top;
  /* set position: relative to make children determine their positions relative to this */
  position: relative;

  /* specify the 4 clockwise coords that lay out the visible section.
    Check out https://bennettfeely.com/clippy/ for a generator */
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  // We can write media queries that apply via screen resolution.
  // 192dpi is often used as a breakpoint for high resolution.
  @media (min-resolution: 192dpi) and (min-width: 37.5em), (min-width: 125em) {
    /* Here we are showing a large image whenever the resolution is at least 192dpi
    and the width is at least 600px because it doesn't make sense to render a 2000px width
    image on a screen that can only usefully show 1200px in width. Or, using the comma,
    we use the large image on any dpi when we have at least 2000px available.*/
    background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)
      ),
      url(../img/hero.jpg);
  }

  @include respond(phone) {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
  }

  /* We use the BEM architecture to make it easier to understand the structure:
  BEM class naming convention = block__element--modifier */
  &__logo-box {
    /* positioning will be determined by parent which needs its position set to relative*/
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    /* position is absolute, so in relation to the parent */
    top: 40%;
    left: 50%;
    /* transform moves the element relative to ITSELF, in this case to center the middle */
    transform: translate(-50%, -50%);
    /* Align text content including display: inline-block to center*/
    text-align: center;
  }
}
